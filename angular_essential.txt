# -- COMPONENTES 


Propriedades principais de um componente :

decorador --> @Component({})

modelo HTML --> template

selector css que definem o componente html --> selector

uma classes typescript que faz o gerenciamento de estados e manipulção da entrada ou busca de dados feito pelo usuário --> export class 

simplificador de criação de componente --> standalone 

string ou array de string que contem estilos css --> styles



exemplo:

// todo-list-item.component.ts
@Component({
  standalone: true,
  selector: 'todo-list-item',
  template: `
    <li>(TODO) Read Angular Essentials Guide</li>
  `,
  styles: `
    li {
      color: red;
      font-weight: 300;
    }
  `,
})
export class TodoListItem {
  /* Component behavior is defined in here */
}




# -- Separando HTML e CSS em arquivos separados


templateUrl --> linkar um arquivo html

styleUrl --> linkar um arquivo css


// todo-list-item.component.ts
@Component({
  standalone: true,
  selector: 'todo-list-item',
  templateUrl: './todo-list-item.component.html',
  styleUrl: './todo-list-item.component.css',
})
export class TodoListItem {
  /* Component behavior is defined in here */
}


<!-- todo-list-item.component.html -->
<li>(TODO) Read Angular Essentials Guide</li>


// todo-list-item.component.css
li {
  color: red;
  font-weight: 300;
}




# -- Usando um componente


1. Importe o componente para o arquivo
2. Adicione-o ao 'imports' array do componente
3. Use o seletor no componente no 'template'

Exemplo:

// todo-list.component.ts
import {TodoListItem} from './todo-list-item.component.ts';
@Component({
  standalone: true,
  imports: [TodoListItem],
  template: `
    <ul>
      <todo-list-item></todo-list-item>
    </ul>
  `,
})
export class TodoList {}



# -- Definindo um estado 


1.taskTitle— Qual é o título da tarefa

2.isComplete- Se a tarefa está concluída ou não


// todo-list-item.component.ts
@Component({ ... })
export class TodoListItem {
  taskTitle = '';
  isComplete = false;
}



# -- Atualizando um estado


@Component({ ... })
export class TodoList {
  taskTitle = ''; --> campos de classe
  isComplete = false; --> campos de classe

  completeTask() { // update
    this.isComplete = true;
  }

  updateTitle(newTitle: string) { // set
    this.taskTitle = newTitle;
  }
}


# -- Rederização de dados dinâmicos

@Component({
  selector: 'todo-list-item',
  template: `
    <p>Title: {{ taskTitle }}</p>
  `,
})
export class TodoListItem {
  taskTitle = 'Read cup of coffee';
}



# -- Propriedades dinâmicas


Quando você precisa definir dinamicamente o valor das propriedades DOM padrão em um elemento HTML, a propriedade é colocada entre colchetes para informar ao Angular que o valor declarado deve ser interpretado como uma instrução dinamica


ex:

@Component({
  selector: 'sign-up-form',
  template: `
    <button type="submit" [disabled]="formIsInvalid">Submit</button>
  `,
})
--> disabled vai ter seu valor definido com base no que for setado na class formIsInvalid do SignUpForm
export class SignUpForm {
  formIsInvalid = true;
}



# -- Atributos Dinâmicos

Caso você queira vincular dinamicamente atributos HTML personalizados (por exemplo, aria-, data-, etc.), você pode querer agrupar os atributos personalizados com os mesmos colchetes.


@Component({
  standalone: true,
  template: `
    <button [attr.data-test-id]="testId">Primary CTA</button>
  `,
})
export class AppBanner {
  testId = 'main-cta';
}




# -- Condicionais e loops

Semelhante à declaração do JavaScript if, Angular usa @if blocos de fluxo de controle para ocultar e mostrar condicionalmente parte de um modelo e seu conteúdo.

else Quando você precisar de um substituto, semelhante à cláusula do JavaScript , adicione um @else bloco para obter o mesmo efeito.

import { Component } from "@angular/core";

@Component({
    standalone:true,
    selector:'user-controls',
    template:`
        @if (isAdmin){
            <button>Erase database</button>
        }
 	@else {
            <p>Você não esta autorizado</p>
        }
    `
})


export class UserControls {
    isAdmin = true;
}






# -- Renderizando uma lista

@for bloco

Semelhante aos loops do JavaScript for...of, o Angular fornece o @forbloco para renderizar elementos repetidos.

<!-- ingredient-list.component.html -->
<ul>
  @for (ingredient of ingredientList; track ingredient.name) {
    <li>{{ ingredient.quantity }} - {{ ingredient.name }}</li>
  }
</ul>


// ingredient-list.component.ts
@Component({
  standalone: true,
  selector: 'ingredient-list',
  templateUrl: './ingredient-list.component.html',
})
export class IngredientList {
  ingredientList = [
    {name: 'noodles', quantity: 1},
    {name: 'miso broth', quantity: 1},
    {name: 'egg', quantity: 2},
  ];
}






# -- track propriedade

Quando Angular renderiza uma lista de elementos com @for, esses itens podem ser alterados ou movidos posteriormente. O Angular precisa rastrear cada elemento por meio de qualquer reordenação, geralmente tratando uma propriedade do item como um identificador ou chave exclusivo.

Isso garante que quaisquer atualizações na lista sejam refletidas corretamente na IU e rastreadas adequadamente no Angular, especialmente no caso de elementos ou animações com estado.

Para conseguir isso, podemos fornecer uma chave exclusiva para Angular com a trackpalavra-chave.






# -- Manipulação de eventos

Você pode adicionar um manipulador de eventos a um elemento:

Adicionando um atributo com o nome do evento entre parênteses
Especifique qual instrução JavaScript você deseja executar quando for disparada



exemplo:

@Component({
    standalone:true,
    selector:'text-transformer',
    template:`
         <p>{{announcement}}</p>
         <button (click)="transformerText()">Abracadabra!</button>
    `
})

export class TextTransfomer {
    announcement = 'Hello again Angular!'
    transformerText(){
        this.announcement = this.announcement.toUpperCase()
    }
}





# -- Serviços


Serviços são pedaços de código reutilizáveis ​​que podem ser injetados

Semelhante à definição de um componente, os serviços são compostos pelo seguinte

Um decorador TypeScript que declara a classe como um serviço Angular via @Injectablee permite definir qual parte do aplicativo pode acessar o serviço por meio da providedInpropriedade (que normalmente é 'root') para permitir que um serviço seja acessado em qualquer lugar dentro do aplicativo.
Uma classe TypeScript que define o código desejado que estará acessível quando o serviço for injetado



import { Injectable } from "@angular/core";

@Injectable({
  providedIn:'root'
})

export class CalculatorService {
  add(x:number,y:number) {
     return x + y
  }
}




# -- Como usar um serviço


Quando quiser usar um serviço em um componente, você precisa:

1.Importe o serviço

2. Declare um campo de classe onde o serviço é injetado. Atribua o campo de classe ao resultado da chamada da função integrada inject que cria o serviço
Esta é a aparência do Receipt componente:








